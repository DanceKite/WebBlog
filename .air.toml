# [Air](https://github.com/cosmtrek/air)的TOML格式配置文件

# 工作目录
# 使用 . 或绝对路径，请注意下面的目录必须在root目录下。
root = "."
tmp_dir = "tmp"

[build]
# 普通的shell命令。你也可以使用`make`。
cmd = "go build -o tmp\\main.exe ."
# `cmd`产生的二进制文件。
bin = "tmp\\main.exe"
# 自定义二进制文件，运行你的应用时可以设置环境变量。
full_bin = "tmp\\main.exe"
# 运行二进制文件（bin/full_bin）时添加额外的参数。将运行'./tmp/main hello world'。
args_bin = ["./conf/config.yaml"]
# 监视这些文件扩展名。
include_ext = ["go", "tpl", "tmpl", "html"]
# 忽略这些文件扩展名或目录。
exclude_dir = ["assets", "tmp", "vendor", "frontend/node_modules"]
# 如果你指定了，监视这些目录。
include_dir = []
# 监视这些文件。
include_file = []
# 排除文件。
exclude_file = []
# 排除特定的正则表达式。
#exclude_regex = ["_test\\.go"]
# 排除未改变的文件。
#exclude_unchanged = true
# 跟踪目录的符号链接
#follow_symlink = true
# 这个日志文件放在你的tmp_dir中。
log = "air.log"
# 轮询文件变化，而不是使用fsnotify。
#poll = false
# 轮询间隔（默认为最小间隔500ms）。
#poll_interval = 500 # ms
# 如果文件变化过于频繁，没有必要每次变化都触发构建。
delay = 1000 # ms
# 当构建错误发生时，停止运行旧的二进制文件。
stop_on_error = true
# 在杀死进程前发送Interrupt信号（windows不支持这个特性）
#send_interrupt = false
# 发送Interrupt信号后的延迟
#kill_delay = 500 # 纳秒
# 是否重新运行二进制文件
#rerun = false
# 每次执行后的延迟
#rerun_delay = 500

[log]
# 显示日志时间
time = true


[color]
# 自定义每个部分的颜色。如果找不到颜色，使用原始的应用程序日志。
main = "magenta"
watcher = "cyan"
build = "yellow"
runner = "green"

[misc]
# 退出时删除tmp目录
clean_on_exit = true

